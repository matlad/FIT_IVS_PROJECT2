/**
 * @file     NumberTest.cpp
 * @encoding UTF-8
 * @date     6.3.18
 * @author   Adam Mátl <xmatla00@stud.fit.vutbr.cz> <matla@matla.cz>
 * @brief    Test pro Number z matematické knihovny
 */

#include <cmath>
#include "../math/Number.h"
#include "../math/UndefinedExeption.h"
#include "gtest/gtest.h"
#include <limits>
#include <stack>
#include <ostream>


using team22::Math::Number;
using team22::Math::UndefinedException;

#define inf  std::numeric_limits<double>::infinity()

#define qNaN  std::numeric_limits<double>::quiet_NaN()

#define doNotCare  std::numeric_limits<double>::quiet_NaN()

#define sNaN  std::numeric_limits<double>::signaling_NaN()

// uvažujeme přesnost na 10 des míst
#define DELTA 0.00000000005

bool myDoubleComparison(double a, double b, double delta = DELTA){
    return fabs(a - b) < delta;
}

struct Params{
    Number number1;
    Number number2;
    Number expecting;

    friend std::ostream &operator<<(std::ostream &os, const Params &params)
    {
        os << "number1: " << params.number1 << " number2: " << params.number2 << " expecting: " << params.expecting;
        return os;
    }
};

struct UnariParams{
    Number number;
    Number expecting;
    friend std::ostream &operator<<(std::ostream &os, const UnariParams &params)
    {
        os << "number: " << params.number << " expecting: " << params.expecting;
        return os;
    }
};
struct ParamTest : testing::Test, testing::WithParamInterface<Params>{
    Params p{0,0,0};
    ParamTest()
    {p = GetParam();}
};

struct UParamTest : testing::Test, testing::WithParamInterface<UnariParams>{
    UnariParams p{0,0};
    UParamTest()
    {p = GetParam(); }
};
struct Sub: ParamTest {};
struct Add: ParamTest {};
struct Mul: ParamTest {};
struct Div: ParamTest {};
struct Exp: ParamTest {};
struct Root: ParamTest{};
struct Mode: ParamTest {};
struct Factorial: UParamTest {};


INSTANTIATE_TEST_CASE_P(def, Sub, testing::Values(
    Params{{        0.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{        2.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{       12.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{      -12.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{       -2.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{        7.0000000000,         6.0000000000},{       -2.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{        7.0000000000,        -6.0000000000},{       -2.0000000000,        12.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{       -7.0000000000,         6.0000000000},{       12.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{       -7.0000000000,        -6.0000000000},{       12.0000000000,        12.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{        7.0000000000,         6.0000000000},{       -2.0000000000,       -12.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{        7.0000000000,        -6.0000000000},{       -2.0000000000,         0.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{       -7.0000000000,         6.0000000000},{       12.0000000000,       -12.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{       -7.0000000000,        -6.0000000000},{       12.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{        7.0000000000,         6.0000000000},{      -12.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{        7.0000000000,        -6.0000000000},{      -12.0000000000,        12.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{       -7.0000000000,         6.0000000000},{        2.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{       -7.0000000000,        -6.0000000000},{        2.0000000000,        12.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{        7.0000000000,         6.0000000000},{      -12.0000000000,       -12.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{        7.0000000000,        -6.0000000000},{      -12.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{       -7.0000000000,         6.0000000000},{        2.0000000000,       -12.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{       -7.0000000000,        -6.0000000000},{        2.0000000000,         0.0000000000}},
    Params{{       -5.6000000000,        -6.8000000000},{       -7.6000000000,        -6.5400000000},{        2.0000000000,        -0.2600000000}},
    Params{{       -5.3540000000,        -6.3300000000},{       -0.6354000000,        -0.6500000000},{       -4.7186000000,        -5.6800000000}},
    Params{{       -5.2200000000,        -6.2200000000},{       -0.5600000000,        -6.5200000000},{       -4.6600000000,         0.3000000000}}
));

INSTANTIATE_TEST_CASE_P(Inf, Sub, testing::Values(
    Params{{    inf,      0}, {      0,      0}, {    inf,       0}},
    Params{{    inf,    inf}, {      0,      0}, {    inf,     inf}},
    Params{{    inf,      5}, {      0,      0}, {    inf,       5}},
    Params{{      5,    inf}, {      0,      0}, {      5,     inf}},
    Params{{      0,      0}, {    inf,    inf}, {   -inf,    -inf}},
    Params{{      0,      0}, {      5,    inf}, {     -5,    -inf}},
    Params{{      0,      0}, {    inf,      5}, {   -inf,      -5}},
    Params{{   -inf,      0}, {      0,      0}, {   -inf,       0}},
    Params{{   -inf,   -inf}, {      0,      0}, {   -inf,    -inf}},
    Params{{   -inf,      5}, {      0,      0}, {   -inf,       5}},
    Params{{      5,   -inf}, {      0,      0}, {      5,    -inf}},
    Params{{      0,      0}, {   -inf,   -inf}, {    inf,     inf}},
    Params{{      0,      0}, {      5,   -inf}, {     -5,     inf}},
    Params{{      0,      0}, {   -inf,      5}, {    inf,      -5}},
    Params{{    inf,    inf}, {   -inf,   -inf}, {    inf,     inf}},
    Params{{    inf,   -inf}, {   -inf,    inf}, {    inf,    -inf}},
    Params{{   -inf,    inf}, {    inf,   -inf}, {   -inf,     inf}},
    Params{{   -inf,   -inf}, {    inf,    inf}, {   -inf,    -inf}}
));

INSTANTIATE_TEST_CASE_P(def, Add, testing::Values(
    Params{{        0.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{      -12.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{       -2.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{        2.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{       12.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{        7.0000000000,         6.0000000000},{       12.0000000000,        12.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{        7.0000000000,        -6.0000000000},{       12.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{       -7.0000000000,         6.0000000000},{       -2.0000000000,        12.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{       -7.0000000000,        -6.0000000000},{       -2.0000000000,         0.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{        7.0000000000,         6.0000000000},{       12.0000000000,         0.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{        7.0000000000,        -6.0000000000},{       12.0000000000,       -12.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{       -7.0000000000,         6.0000000000},{       -2.0000000000,         0.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{       -7.0000000000,        -6.0000000000},{       -2.0000000000,       -12.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{        7.0000000000,         6.0000000000},{        2.0000000000,        12.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{        7.0000000000,        -6.0000000000},{        2.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{       -7.0000000000,         6.0000000000},{      -12.0000000000,        12.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{       -7.0000000000,        -6.0000000000},{      -12.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{        7.0000000000,         6.0000000000},{        2.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{        7.0000000000,        -6.0000000000},{        2.0000000000,       -12.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{       -7.0000000000,         6.0000000000},{      -12.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{       -7.0000000000,        -6.0000000000},{      -12.0000000000,       -12.0000000000}},
    Params{{       -5.6000000000,        -6.8000000000},{       -7.6000000000,        -6.5400000000},{      -13.2000000000,       -13.3400000000}},
    Params{{       -5.3540000000,        -6.3300000000},{       -0.6354000000,        -0.6500000000},{       -5.9894000000,        -6.9800000000}},
    Params{{       -5.2200000000,        -6.2200000000},{       -0.5600000000,        -6.5200000000},{       -5.7800000000,       -12.7400000000}}
));

INSTANTIATE_TEST_CASE_P(Inf, Add, testing::Values(
    Params{{    inf,      0}, {      0,      0}, {    inf,       0}},
    Params{{    inf,    inf}, {      0,      0}, {    inf,     inf}},
    Params{{    inf,      5}, {      0,      0}, {    inf,       5}},
    Params{{      5,    inf}, {      0,      0}, {      5,     inf}},
    Params{{      0,      0}, {    inf,    inf}, {    inf,     inf}},
    Params{{      0,      0}, {      5,    inf}, {      5,     inf}},
    Params{{      0,      0}, {    inf,      5}, {    inf,       5}},
    Params{{    inf,    inf}, {    inf,    inf}, {    inf,     inf}},
    Params{{   -inf,      0}, {      0,      0}, {   -inf,       0}},
    Params{{   -inf,   -inf}, {      0,      0}, {   -inf,    -inf}},
    Params{{   -inf,      5}, {      0,      0}, {   -inf,       5}},
    Params{{      5,   -inf}, {      0,      0}, {      5,    -inf}},
    Params{{      0,      0}, {   -inf,   -inf}, {   -inf,    -inf}},
    Params{{      0,      0}, {      5,   -inf}, {      5,    -inf}},
    Params{{      0,      0}, {   -inf,      5}, {   -inf,       5}},
    Params{{    inf,    inf}, {    inf,    inf}, {    inf,     inf}},
    Params{{    inf,   -inf}, {    inf,   -inf}, {    inf,    -inf}},
    Params{{   -inf,    inf}, {   -inf,    inf}, {   -inf,     inf}},
    Params{{   -inf,   -inf}, {   -inf,   -inf}, {   -inf,    -inf}}
));

INSTANTIATE_TEST_CASE_P(def, Mul, testing::Values(
    Params{{        0.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{       35.0000000000,        -0.0000000000}},
    Params{{        5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{      -35.0000000000,         0.0000000000}},
    Params{{       -5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{      -35.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{       35.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{        7.0000000000,         6.0000000000},{       -1.0000000000,        72.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{        7.0000000000,        -6.0000000000},{       71.0000000000,        12.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{       -7.0000000000,         6.0000000000},{      -71.0000000000,       -12.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{       -7.0000000000,        -6.0000000000},{        1.0000000000,       -72.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{        7.0000000000,         6.0000000000},{       71.0000000000,       -12.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{        7.0000000000,        -6.0000000000},{       -1.0000000000,       -72.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{       -7.0000000000,         6.0000000000},{        1.0000000000,        72.0000000000}},
    Params{{        5.0000000000,        -6.0000000000},{       -7.0000000000,        -6.0000000000},{      -71.0000000000,        12.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{        7.0000000000,         6.0000000000},{      -71.0000000000,        12.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{        7.0000000000,        -6.0000000000},{        1.0000000000,        72.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{       -7.0000000000,         6.0000000000},{       -1.0000000000,       -72.0000000000}},
    Params{{       -5.0000000000,         6.0000000000},{       -7.0000000000,        -6.0000000000},{       71.0000000000,       -12.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{        7.0000000000,         6.0000000000},{        1.0000000000,       -72.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{        7.0000000000,        -6.0000000000},{      -71.0000000000,       -12.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{       -7.0000000000,         6.0000000000},{       71.0000000000,        12.0000000000}},
    Params{{       -5.0000000000,        -6.0000000000},{       -7.0000000000,        -6.0000000000},{       -1.0000000000,        72.0000000000}},
    Params{{       -5.6000000000,        -6.8000000000},{       -7.6000000000,        -6.5400000000},{       -1.9120000000,        88.3040000000}},
    Params{{       -5.3540000000,        -6.3300000000},{       -0.6354000000,        -0.6500000000},{       -0.7125684000,         7.5021820000}},
    Params{{       -5.2200000000,        -6.2200000000},{       -0.5600000000,        -6.5200000000},{      -37.6312000000,        37.5176000000}}
));

INSTANTIATE_TEST_CASE_P(Inf, Mul, testing::Values(
    Params{{    inf,    inf}, {      0,      0}, {    inf,     inf}},
    Params{{    inf,      5}, {      0,      0}, {    inf,     inf}},
    Params{{      5,    inf}, {      0,      0}, {    inf,     inf}},
    Params{{      0,      0}, {    inf,    inf}, {      0,       0}},
    Params{{      0,      0}, {      5,    inf}, {      0,       0}},
    Params{{      0,      0}, {    inf,      5}, {      0,       0}},
    Params{{   -inf,   -inf}, {      0,      0}, {   -inf,    -inf}},
    Params{{   -inf,      5}, {      0,      0}, {   -inf,     inf}},
    Params{{      5,   -inf}, {      0,      0}, {    inf,    -inf}},
    Params{{      0,      0}, {   -inf,   -inf}, {     -0,       0}},
    Params{{      0,      0}, {      5,   -inf}, {     -0,       0}},
    Params{{      0,      0}, {   -inf,      5}, {     -0,      -0}}
));

INSTANTIATE_TEST_CASE_P(def, Div, testing::Values(
    Params{{       -5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{        0.7142857143,        -0.0000000000}},
    Params{{        5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{       -0.7142857143,        -0.0000000000}},
    Params{{       -5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{       -0.7142857143,         0.0000000000}},
    Params{{        5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{        0.7142857143,         0.0000000000}},
    Params{{        5.0000000000,         6.0000000000},{        7.0000000000,         6.0000000000},{        0.8352941176,         0.1411764706}},
    Params{{        5.0000000000,         6.0000000000},{        7.0000000000,        -6.0000000000},{       -0.0117647059,         0.8470588235}},
    Params{{        5.0000000000,         6.0000000000},{       -7.0000000000,         6.0000000000},{        0.0117647059,        -0.8470588235}},
    Params{{        5.0000000000,         6.0000000000},{       -7.0000000000,        -6.0000000000},{       -0.8352941176,        -0.1411764706}},
    Params{{        5.0000000000,        -6.0000000000},{        7.0000000000,         6.0000000000},{       -0.0117647059,        -0.8470588235}},
    Params{{        5.0000000000,        -6.0000000000},{        7.0000000000,        -6.0000000000},{        0.8352941176,        -0.1411764706}},
    Params{{        5.0000000000,        -6.0000000000},{       -7.0000000000,         6.0000000000},{       -0.8352941176,         0.1411764706}},
    Params{{        5.0000000000,        -6.0000000000},{       -7.0000000000,        -6.0000000000},{        0.0117647059,         0.8470588235}},
    Params{{       -5.0000000000,         6.0000000000},{        7.0000000000,         6.0000000000},{        0.0117647059,         0.8470588235}},
    Params{{       -5.0000000000,         6.0000000000},{        7.0000000000,        -6.0000000000},{       -0.8352941176,         0.1411764706}},
    Params{{       -5.0000000000,         6.0000000000},{       -7.0000000000,         6.0000000000},{        0.8352941176,        -0.1411764706}},
    Params{{       -5.0000000000,         6.0000000000},{       -7.0000000000,        -6.0000000000},{       -0.0117647059,        -0.8470588235}},
    Params{{       -5.0000000000,        -6.0000000000},{        7.0000000000,         6.0000000000},{       -0.8352941176,        -0.1411764706}},
    Params{{       -5.0000000000,        -6.0000000000},{        7.0000000000,        -6.0000000000},{        0.0117647059,        -0.8470588235}},
    Params{{       -5.0000000000,        -6.0000000000},{       -7.0000000000,         6.0000000000},{       -0.0117647059,         0.8470588235}},
    Params{{       -5.0000000000,        -6.0000000000},{       -7.0000000000,        -6.0000000000},{        0.8352941176,         0.1411764706}},
    Params{{       -5.6000000000,        -6.8000000000},{       -7.6000000000,        -6.5400000000},{        0.8657178439,         0.1497638553}},
    Params{{       -5.3540000000,        -6.3300000000},{       -0.6354000000,        -0.6500000000},{        9.0972281965,         0.6559673785}},
    Params{{       -5.2200000000,        -6.2200000000},{       -0.5600000000,        -6.5200000000},{        1.0152624696,        -0.7134130394}}

));

INSTANTIATE_TEST_CASE_P(def, Exp, testing::Values(
    Params{{       -5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{       -0.0000128000,        -0.0000000000}},
    Params{{        5.0000000000,         0.0000000000},{       -7.0000000000,         0.0000000000},{        0.0000128000,         0.0000000000}},
    Params{{       -5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{   -78125.0000000000,         0.0000000001}},
    Params{{        5.0000000000,         0.0000000000},{        7.0000000000,         0.0000000000},{    78125.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         3.0000000000},{        7.0000000000,         4.0000000000},{    -4201.5802028422,    -26049.1985132972}},
    Params{{        5.0000000000,         3.0000000000},{        7.0000000000,        -4.0000000000},{ -1974252.9927471823,    254478.7227479428}},
    Params{{        5.0000000000,         3.0000000000},{       -7.0000000000,         4.0000000000},{       -0.0000004982,        -0.0000000642}},
    Params{{        5.0000000000,         3.0000000000},{       -7.0000000000,        -4.0000000000},{       -0.0000060349,         0.0000374155}},
    Params{{        5.0000000000,        -3.0000000000},{        7.0000000000,         4.0000000000},{ -1974252.9927471823,   -254478.7227479428}},
    Params{{        5.0000000000,        -3.0000000000},{        7.0000000000,        -4.0000000000},{    -4201.5802028422,     26049.1985132972}},
    Params{{        5.0000000000,        -3.0000000000},{       -7.0000000000,         4.0000000000},{       -0.0000060349,        -0.0000374155}},
    Params{{        5.0000000000,        -3.0000000000},{       -7.0000000000,        -4.0000000000},{       -0.0000004982,         0.0000000642}},
    Params{{       -5.0000000000,         3.0000000000},{        7.0000000000,         4.0000000000},{        6.8848960835,         0.8874544286}},
    Params{{       -4.0000000000,         3.0000000000},{        3.0000000000,        -4.0000000000},{  1344059.1177556887,   2378939.0106299054}},
    Params{{       -5.0000000000,         3.0000000000},{       -7.0000000000,         4.0000000000},{        0.0000000000,         0.0000000001}},
    Params{{       -5.0000000000,         3.0000000000},{       -7.0000000000,        -4.0000000000},{        0.1428716782,        -0.0184159793}},
    Params{{       -2.0000000000,        -3.0000000000},{        3.0000000000,         4.0000000000},{    58655.8189304190,   -257107.8971594501}},
    Params{{       -5.0000000000,        -3.0000000000},{        7.0000000000,        -4.0000000000},{        6.8848960835,        -0.8874544286}},
    Params{{       -5.0000000000,        -3.0000000000},{       -7.0000000000,         4.0000000000},{        0.1428716782,         0.0184159793}},
    Params{{       -5.0000000000,        -3.0000000000},{       -7.0000000000,        -4.0000000000},{        0.0000000000,        -0.0000000001}},
    Params{{       -5.6000000000,        -6.8000000000},{       -7.6000000000,        -6.5400000000},{       -0.0000000000,         0.0000000000}},
    Params{{       -5.3540000000,        -6.3300000000},{       -0.6354000000,        -0.6500000000},{        0.0593851380,         0.0041244797}},
    Params{{       -5.2200000000,        -6.2200000000},{       -0.5600000000,        -6.5200000000},{        0.0000001144,         0.0000000210}}
));

INSTANTIATE_TEST_CASE_P(Inf, Exp, testing::Values(
    Params{{   -inf,   -inf}, {   -inf,   -inf}, {      0,      -0}},
    Params{{      0,      0}, {    inf,    inf}, {      0,      -0}},
    Params{{      0,      0}, {    inf,      5}, {      0,      -0}},
    Params{{    inf,    inf}, {   -inf,    inf}, {      0,      -0}},
    Params{{    inf,   -inf}, {   -inf,   -inf}, {      0,      -0}},
    Params{{   -inf,    inf}, {   -inf,    inf}, {      0,      -0}}
));

INSTANTIATE_TEST_CASE_P(def, Root, testing::Values(
    Params{{        0.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000},{        0.0000000000,        -0.0000000000}},
    Params{{      -16.0000000000,         0.0000000000},{       -2.0000000000,         0.0000000000},{        0.0000000000,        -0.2500000000}},
    Params{{       16.0000000000,         0.0000000000},{       -2.0000000000,         0.0000000000},{        0.2500000000,        -0.0000000000}},
    Params{{      -16.0000000000,         0.0000000000},{        2.0000000000,         0.0000000000},{        0.0000000000,         4.0000000000}},
    Params{{       16.0000000000,         0.0000000000},{        2.0000000000,         0.0000000000},{        4.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         3.0000000000},{        7.0000000000,         4.0000000000},{        1.2484112423,        -0.0628535772}},
    Params{{        5.0000000000,         3.0000000000},{        7.0000000000,        -4.0000000000},{        1.1533429991,         0.1940660922}},
    Params{{        5.0000000000,         3.0000000000},{       -7.0000000000,         4.0000000000},{        0.8431722161,        -0.1418755194}},
    Params{{        5.0000000000,         3.0000000000},{       -7.0000000000,        -4.0000000000},{        0.7989928075,         0.0402267733}},
    Params{{        5.0000000000,        -3.0000000000},{        7.0000000000,         4.0000000000},{        1.1533429991,        -0.1940660922}},
    Params{{        5.0000000000,        -3.0000000000},{        7.0000000000,        -4.0000000000},{        1.2484112423,         0.0628535772}},
    Params{{        5.0000000000,        -3.0000000000},{       -7.0000000000,         4.0000000000},{        0.7989928075,        -0.0402267733}},
    Params{{        5.0000000000,        -3.0000000000},{       -7.0000000000,        -4.0000000000},{        0.8431722161,         0.1418755194}},
    Params{{       -5.0000000000,         3.0000000000},{        7.0000000000,         4.0000000000},{        1.3981543688,         0.2423393699}},
    Params{{       -4.0000000000,         3.0000000000},{        3.0000000000,        -4.0000000000},{        0.6903089462,         0.4301786506}},
    Params{{       -5.0000000000,         3.0000000000},{       -7.0000000000,         4.0000000000},{        0.8982503509,        -0.3677922250}},
    Params{{       -5.0000000000,         3.0000000000},{       -7.0000000000,        -4.0000000000},{        0.6943679776,        -0.1203534473}},
    Params{{       -2.0000000000,        -3.0000000000},{        3.0000000000,         4.0000000000},{        0.7383148075,        -0.3697151950}},
    Params{{       -5.0000000000,        -3.0000000000},{        7.0000000000,        -4.0000000000},{        1.3981543688,        -0.2423393699}},
    Params{{       -5.0000000000,        -3.0000000000},{       -7.0000000000,         4.0000000000},{        0.6943679776,         0.1203534473}},
    Params{{       -5.0000000000,        -3.0000000000},{       -7.0000000000,        -4.0000000000},{        0.8982503509,         0.3677922250}},
    Params{{       -5.6000000000,        -6.8000000000},{       -7.6000000000,        -6.5400000000},{        0.9351161560,         0.3019935097}},
    Params{{       -5.3540000000,        -6.3300000000},{       -0.6354000000,        -0.6500000000},{       -1.1325638121,        -0.3137877092}},
    Params{{       -5.2200000000,        -6.2200000000},{       -0.5600000000,        -6.5200000000},{        1.2918307317,         0.4694159215}}
));

INSTANTIATE_TEST_CASE_P(def, Mode, testing::Values(
    Params{{      -16.0000000000,         0.0000000000},{       -2.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000}},
    Params{{       16.0000000000,         0.0000000000},{       -2.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000}},
    Params{{      -16.0000000000,         0.0000000000},{        2.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000}},
    Params{{       16.0000000000,         0.0000000000},{        2.0000000000,         0.0000000000},{        0.0000000000,         0.0000000000}},
    Params{{        5.0000000000,         3.0000000000},{        7.0000000000,         4.0000000000},{        5.0000000000,         3.0000000000}},
    Params{{        5.0000000000,         3.0000000000},{        7.0000000000,        -4.0000000000},{        5.0000000000,         3.0000000000}},
    Params{{        5.0000000000,         3.0000000000},{       -7.0000000000,         4.0000000000},{        5.0000000000,         3.0000000000}},
    Params{{        5.0000000000,         3.0000000000},{       -7.0000000000,        -4.0000000000},{        5.0000000000,         3.0000000000}},
    Params{{        5.0000000000,        -3.0000000000},{        7.0000000000,         4.0000000000},{        5.0000000000,        -3.0000000000}},
    Params{{        5.0000000000,        -3.0000000000},{        7.0000000000,        -4.0000000000},{        5.0000000000,        -3.0000000000}},
    Params{{        5.0000000000,        -3.0000000000},{       -7.0000000000,         4.0000000000},{        5.0000000000,        -3.0000000000}},
    Params{{        5.0000000000,        -3.0000000000},{       -7.0000000000,        -4.0000000000},{        5.0000000000,        -3.0000000000}},
    Params{{       -5.0000000000,         3.0000000000},{        7.0000000000,         4.0000000000},{       -5.0000000000,         3.0000000000}},
    Params{{       -4.0000000000,         3.0000000000},{        3.0000000000,        -4.0000000000},{       -4.0000000000,         3.0000000000}},
    Params{{       -5.0000000000,         3.0000000000},{       -7.0000000000,         4.0000000000},{       -5.0000000000,         3.0000000000}},
    Params{{       -5.0000000000,         3.0000000000},{       -7.0000000000,        -4.0000000000},{       -5.0000000000,         3.0000000000}},
    Params{{       -2.0000000000,        -3.0000000000},{        3.0000000000,         4.0000000000},{       -2.0000000000,        -3.0000000000}},
    Params{{       -5.0000000000,        -3.0000000000},{        7.0000000000,        -4.0000000000},{       -5.0000000000,        -3.0000000000}},
    Params{{       -5.0000000000,        -3.0000000000},{       -7.0000000000,         4.0000000000},{       -5.0000000000,        -3.0000000000}},
    Params{{       -5.0000000000,        -3.0000000000},{       -7.0000000000,        -4.0000000000},{       -5.0000000000,        -3.0000000000}},
    Params{{       25.0000000000,        63.0000000000},{        7.0000000000,         4.0000000000},{        3.0000000000,         4.0000000000}},
    Params{{       65.0000000000,        32.0000000000},{        7.0000000000,        -4.0000000000},{        2.0000000000,         3.0000000000}},
    Params{{       45.0000000000,        32.0000000000},{       -7.0000000000,         4.0000000000},{        7.0000000000,        -2.0000000000}},
    Params{{       15.0000000000,        13.0000000000},{       -7.0000000000,        -4.0000000000},{        1.0000000000,         5.0000000000}},
    Params{{       95.0000000000,      -363.0000000000},{        7.0000000000,         4.0000000000},{        3.0000000000,        -7.0000000000}},
    Params{{       15.0000000000,       -31.0000000000},{        7.0000000000,        -4.0000000000},{        2.0000000000,        -5.0000000000}},
    Params{{       95.0000000000,       -31.0000000000},{       -7.0000000000,         4.0000000000},{        3.0000000000,         3.0000000000}},
    Params{{       55.0000000000,       -36.0000000000},{       -7.0000000000,        -4.0000000000},{        6.0000000000,         1.0000000000}},
    Params{{       -5.6000000000,        -6.8000000000},{       -7.6000000000,        -6.5400000000},{       -5.6000000000,        -6.8000000000}},
    Params{{       -5.3540000000,        -6.3300000000},{       -0.6354000000,        -0.6500000000},{        0.3646000000,        -0.4800000000}},
    Params{{       -5.2200000000,        -6.2200000000},{       -0.5600000000,        -6.5200000000},{       -4.6600000000,         0.3000000000}},
));

INSTANTIATE_TEST_CASE_P(Inf, Mode, testing::Values(
    Params{{    inf,      5}, {      0,      0}, {    inf,     inf}},
    Params{{      5,    inf}, {      0,      0}, {    inf,     inf}},
    Params{{      0,      0}, {    inf,    inf}, {      0,       0}},
    Params{{      0,      0}, {      5,    inf}, {      0,       0}},
    Params{{      0,      0}, {    inf,      5}, {      0,       0}},
    Params{{   -inf,   -inf}, {      0,      0}, {   -inf,    -inf}},
    Params{{   -inf,      5}, {      0,      0}, {   -inf,     inf}},
    Params{{      5,   -inf}, {      0,      0}, {    inf,    -inf}},
    Params{{      0,      0}, {   -inf,   -inf}, {     -0,       0}},
    Params{{      0,      0}, {      5,   -inf}, {     -0,       0}},
    Params{{      0,      0}, {   -inf,      5}, {     -0,      -0}}
));



INSTANTIATE_TEST_CASE_P(def, Factorial, testing::Values(
    UnariParams{{0},{1}},
    UnariParams{{5},{120}},
    UnariParams{{5.1},{142.451944065678}},
    UnariParams{{-5},{-120}},
    UnariParams{{5, -2},{4.0039686637632879, 0.30989965660362}},
    UnariParams{{5,  2},{5.9960313362367120, -0.30989965660362}},
    UnariParams{{-5,-2},{-5.9960313362367120, 0.30989965660362}},
    UnariParams{{-5, 2},{-4.0039686637632879, -0.30989965660362}}
));

INSTANTIATE_TEST_CASE_P(inf, Factorial, testing::Values(
    UnariParams{{inf}, {inf}},
    UnariParams{{5, inf}, {0}}
));


TEST_P(Add, oper){
    auto result = p.number1 + p.number2;
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Sub, oper){
    auto result = p.number1 - p.number2;
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Mul, oper){
    auto result = p.number1 * p.number2;
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Div, oper){
    auto result = p.number1 / p.number2;
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Exp, oper){
    auto result = p.number1 ^ p.number2;
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}


TEST_P(Mode, oper){
  
    auto result = p.number1 % p.number2;
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Factorial, oper){
    auto result = !p.number;
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Add, fce){
    auto result = p.number1.add(p.number2);
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Sub, fce){
    auto result = p.number1.sub(p.number2);
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Mul, fce){
    auto result = p.number1.mul(p.number2);
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Div, fce){
    auto result = p.number1.div(p.number2);
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Exp, fce){
  
    auto result = p.number1.pow(p.number2);
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}


TEST_P(Mode, fce){
  
    auto result = p.number1.mod(p.number2);
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Root, fce){
  
    auto result = p.number1.root(p.number2);
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}

TEST_P(Factorial, fce){
    auto result = p.number.fact();
    myDoubleComparison(p.expecting.getReal(), result.getReal());
    myDoubleComparison(p.expecting.getImaginary(), result.getImaginary());

}


/***********************************************************************************************************************
 * Udefined
 **********************************************************************************************************************/

struct UndefSub: ParamTest {};
struct UndefAdd: ParamTest {};
struct UndefMul: ParamTest {};
struct UndefDiv: ParamTest {};
struct UndefExp: ParamTest {};
struct UndefRoot: ParamTest {};
struct UndefMode: ParamTest {};
struct UndefFactorial: UParamTest {};

INSTANTIATE_TEST_CASE_P(divWithZero, UndefDiv, testing::Values(
    Params{{5}, {0}, {0}}
));

INSTANTIATE_TEST_CASE_P(divWithZero, UndefMode, testing::Values(
    Params{{5}, {0}, {0}}
));

INSTANTIATE_TEST_CASE_P(zero, UndefExp, testing::Values(
    Params{{0}, {0}, {0}}
));

INSTANTIATE_TEST_CASE_P(zero, UndefRoot, testing::Values(
    Params{{5}, {0}, {0}}
));




INSTANTIATE_TEST_CASE_P(Inf, UndefSub, testing::Values(
    Params{{   -inf,   -inf}, {    inf,   -inf}, {   -inf,    -doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,    inf}, {   -doNotCare,    -inf}},
    Params{{   -inf,   -inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {    inf,   -inf}, {   -doNotCare,     inf}},
    Params{{    inf,    inf}, {   -inf,    inf}, {    inf,    -doNotCare}},
    Params{{    inf,   -inf}, {    inf,    inf}, {   -doNotCare,    -inf}},
    Params{{    inf,   -inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {   -inf,   -inf}, {    inf,    -doNotCare}},
    Params{{   -inf,    inf}, {    inf,    inf}, {   -inf,    -doNotCare}},
    Params{{   -inf,    inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {   -inf,   -inf}, {   -doNotCare,     inf}}
));

INSTANTIATE_TEST_CASE_P(Inf, UndefAdd, testing::Values(
    Params{{    inf,    inf}, {    inf,   -inf}, {    inf,    -doNotCare}},
    Params{{    inf,    inf}, {   -inf,    inf}, {   -doNotCare,     inf}},
    Params{{    inf,    inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {    inf,    inf}, {    inf,    -doNotCare}},
    Params{{    inf,   -inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {   -inf,   -inf}, {   -doNotCare,    -inf}},
    Params{{   -inf,    inf}, {    inf,    inf}, {   -doNotCare,     inf}},
    Params{{   -inf,    inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {   -inf,   -inf}, {   -inf,    -doNotCare}},
    Params{{   -inf,   -inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {    inf,   -inf}, {   -doNotCare,    -inf}},
    Params{{   -inf,   -inf}, {   -inf,    inf}, {   -inf,    -doNotCare}}
));

INSTANTIATE_TEST_CASE_P(Inf, UndefMul, testing::Values(
    Params{{    inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,      0}, {      0,      0}, {    inf,    -doNotCare}},
    Params{{    inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,      0}, {      0,      0}, {   -inf,    -doNotCare}}
));

INSTANTIATE_TEST_CASE_P(Inf, UndefDiv, testing::Values(
    Params{{    inf,    inf}, {      0,      0}, {    inf,     inf}},
    Params{{    inf,      5}, {      0,      0}, {    inf,     inf}},
    Params{{      5,    inf}, {      0,      0}, {    inf,     inf}},
    Params{{      0,      0}, {    inf,    inf}, {      0,       0}},
    Params{{      0,      0}, {      5,    inf}, {      0,       0}},
    Params{{      0,      0}, {    inf,      5}, {      0,       0}},
    Params{{   -inf,   -inf}, {      0,      0}, {   -inf,    -inf}},
    Params{{   -inf,      5}, {      0,      0}, {   -inf,     inf}},
    Params{{      5,   -inf}, {      0,      0}, {    inf,    -inf}},
    Params{{      0,      0}, {   -inf,   -inf}, {     -0,       0}},
    Params{{      0,      0}, {      5,   -inf}, {     -0,       0}},
    Params{{      0,      0}, {   -inf,      5}, {     -0,      -0}},
    Params{{    inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,      0}, {      0,      0}, {    inf,    -doNotCare}},
    Params{{    inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,      0}, {      0,      0}, {   -inf,    -doNotCare}}
));


INSTANTIATE_TEST_CASE_P(Inf, UndefExp, testing::Values(
    Params{{    inf,      0}, {      0,      0}, {    doNotCare,     doNotCare}},
    Params{{    inf,    inf}, {      0,      0}, {    doNotCare,     doNotCare}},
    Params{{    inf,      5}, {      0,      0}, {    doNotCare,     doNotCare}},
    Params{{      5,    inf}, {      0,      0}, {    doNotCare,     doNotCare}},
    Params{{      0,      0}, {      5,    inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,    inf}, {    inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,      0}, {      0,      0}, {    doNotCare,     doNotCare}},
    Params{{   -inf,   -inf}, {      0,      0}, {    doNotCare,     doNotCare}},
    Params{{   -inf,      5}, {      0,      0}, {    doNotCare,     doNotCare}},
    Params{{      5,   -inf}, {      0,      0}, {    doNotCare,     doNotCare}},
    Params{{      0,      0}, {   -inf,   -inf}, {    inf,     doNotCare}},
    Params{{      0,      0}, {      5,   -inf}, {    doNotCare,     doNotCare}},
    Params{{      0,      0}, {   -inf,      5}, {    inf,     doNotCare}},
    Params{{    inf,    inf}, {    inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,    inf}, {    inf,   -inf}, {    inf,     doNotCare}},
    Params{{    inf,    inf}, {   -inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,   -inf}, {    inf,    inf}, {    inf,     doNotCare}},
    Params{{    inf,   -inf}, {    inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,   -inf}, {   -inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,    inf}, {    inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,    inf}, {    inf,   -inf}, {    inf,     doNotCare}},
    Params{{   -inf,    inf}, {   -inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,   -inf}, {    inf,    inf}, {    inf,     doNotCare}},
    Params{{   -inf,   -inf}, {    inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,    inf}, {    doNotCare,     doNotCare}}
));

INSTANTIATE_TEST_CASE_P(Inf, UndefRoot, testing::Values(
    Params{{    inf,      0}, {      0,      0}, {    inf,     doNotCare}},
    Params{{    inf,    inf}, {      0,      0}, {    inf,     doNotCare}},
    Params{{    inf,      5}, {      0,      0}, {    inf,     doNotCare}},
    Params{{      5,    inf}, {      0,      0}, {    inf,     doNotCare}},
    Params{{      0,      0}, {    inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{      0,      0}, {      5,    inf}, {    doNotCare,     doNotCare}},
    Params{{      0,      0}, {    inf,      5}, {    doNotCare,     doNotCare}},
    Params{{    inf,    inf}, {    inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,      0}, {      0,      0}, {    inf,     doNotCare}},
    Params{{   -inf,   -inf}, {      0,      0}, {    inf,     doNotCare}},
    Params{{   -inf,      5}, {      0,      0}, {    inf,     doNotCare}},
    Params{{      5,   -inf}, {      0,      0}, {    inf,     doNotCare}},
    Params{{      0,      0}, {   -inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{      0,      0}, {      5,   -inf}, {    doNotCare,     doNotCare}},
    Params{{      0,      0}, {   -inf,      5}, {    doNotCare,     doNotCare}},
    Params{{    inf,    inf}, {    inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,    inf}, {    inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,    inf}, {   -inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,    inf}, {   -inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,   -inf}, {    inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,   -inf}, {    inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,   -inf}, {   -inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{    inf,   -inf}, {   -inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,    inf}, {    inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,    inf}, {    inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,    inf}, {   -inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,    inf}, {   -inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,   -inf}, {    inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,   -inf}, {    inf,   -inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,    inf}, {    doNotCare,     doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,   -inf}, {    doNotCare,     doNotCare}}
));

INSTANTIATE_TEST_CASE_P(Inf, UndefMode, testing::Values(
    Params{{    inf,    inf}, {      0,      0}, {    inf,     inf}},
    Params{{    inf,      5}, {      0,      0}, {    inf,     inf}},
    Params{{      5,    inf}, {      0,      0}, {    inf,     inf}},
    Params{{      0,      0}, {    inf,    inf}, {      0,       0}},
    Params{{      0,      0}, {      5,    inf}, {      0,       0}},
    Params{{      0,      0}, {    inf,      5}, {      0,       0}},
    Params{{   -inf,   -inf}, {      0,      0}, {   -inf,    -inf}},
    Params{{   -inf,      5}, {      0,      0}, {   -inf,     inf}},
    Params{{      5,   -inf}, {      0,      0}, {    inf,    -inf}},
    Params{{      0,      0}, {   -inf,   -inf}, {     -0,       0}},
    Params{{      0,      0}, {      5,   -inf}, {     -0,       0}},
    Params{{      0,      0}, {   -inf,      5}, {     -0,      -0}},
    Params{{    inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,    inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,   -inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,    inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {    inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,   -inf}, {   -inf,   -inf}, {   -doNotCare,    -doNotCare}},
    Params{{    inf,      0}, {      0,      0}, {    inf,    -doNotCare}},
    Params{{    inf,    inf}, {    inf,    inf}, {   -doNotCare,    -doNotCare}},
    Params{{   -inf,      0}, {      0,      0}, {   -inf,    -doNotCare}}
));


INSTANTIATE_TEST_CASE_P(Inf, UndefFactorial, testing::Values(
  UnariParams{{inf, inf}, {0}}
));


INSTANTIATE_TEST_CASE_P(quietNan, UndefSub, testing::Values(
    Params{{qNaN}, {0}, {0}},
    Params{{qNaN, qNaN}, {0}, {0}},
    Params{{qNaN, 5}, {0}, {0}},
    Params{{5, qNaN}, {0}, {0}},
    Params{{0}, {qNaN, qNaN}, {0}},
    Params{{0}, {5, qNaN}, {0}},
    Params{{0}, {qNaN, 5}, {0}},
    Params{{qNaN, qNaN}, {qNaN, qNaN}, {0}}
));

INSTANTIATE_TEST_CASE_P(quietNan, UndefAdd, testing::Values(
    Params{{qNaN}, {0}, {0}},
    Params{{qNaN, qNaN}, {0}, {0}},
    Params{{qNaN, 5}, {0}, {0}},
    Params{{5, qNaN}, {0}, {0}},
    Params{{0}, {qNaN, qNaN}, {0}},
    Params{{0}, {5, qNaN}, {0}},
    Params{{0}, {qNaN, 5}, {0}},
    Params{{qNaN, qNaN}, {qNaN, qNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(quietNan, UndefMul, testing::Values(
    Params{{qNaN}, {0}, {0}},
    Params{{qNaN, qNaN}, {0}, {0}},
    Params{{qNaN, 5}, {0}, {0}},
    Params{{5, qNaN}, {0}, {0}},
    Params{{0}, {qNaN, qNaN}, {0}},
    Params{{0}, {5, qNaN}, {0}},
    Params{{0}, {qNaN, 5}, {0}},
    Params{{qNaN, qNaN}, {qNaN, qNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(quietNan, UndefExp, testing::Values(
    Params{{qNaN}, {0}, {0}},
    Params{{qNaN, qNaN}, {0}, {0}},
    Params{{qNaN, 5}, {0}, {0}},
    Params{{5, qNaN}, {0}, {0}},
    Params{{0}, {qNaN, qNaN}, {0}},
    Params{{0}, {5, qNaN}, {0}},
    Params{{0}, {qNaN, 5}, {0}},
    Params{{qNaN, qNaN}, {qNaN, qNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(quietNan, UndefRoot, testing::Values(
    Params{{qNaN}, {0}, {0}},
    Params{{qNaN, qNaN}, {0}, {0}},
    Params{{qNaN, 5}, {0}, {0}},
    Params{{5, qNaN}, {0}, {0}},
    Params{{0}, {qNaN, qNaN}, {0}},
    Params{{0}, {5, qNaN}, {0}},
    Params{{0}, {qNaN, 5}, {0}},
    Params{{qNaN, qNaN}, {qNaN, qNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(quietNan, UndefMode, testing::Values(
    Params{{qNaN}, {0}, {0}},
    Params{{qNaN, qNaN}, {0}, {0}},
    Params{{qNaN, 5}, {0}, {0}},
    Params{{5, qNaN}, {0}, {0}},
    Params{{0}, {qNaN, qNaN}, {0}},
    Params{{0}, {5, qNaN}, {0}},
    Params{{0}, {qNaN, 5}, {0}},
    Params{{qNaN, qNaN}, {qNaN, qNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(quietNan, UndefFactorial, testing::Values(
    UnariParams{{qNaN}, {0}},
    UnariParams{{qNaN, qNaN}, {0}},
    UnariParams{{5, qNaN}, {0}}
));

INSTANTIATE_TEST_CASE_P(signalingNan, UndefSub, testing::Values(
    Params{{sNaN}, {0}, {0}},
    Params{{sNaN, sNaN}, {0}, {0}},
    Params{{sNaN, 5}, {0}, {0}},
    Params{{5, sNaN}, {0}, {0}},
    Params{{0}, {sNaN, sNaN}, {0}},
    Params{{0}, {5, sNaN}, {0}},
    Params{{0}, {sNaN, 5}, {0}},
    Params{{sNaN, sNaN}, {sNaN, sNaN}, {0}}
));

INSTANTIATE_TEST_CASE_P(signalingNan, UndefAdd, testing::Values(
    Params{{sNaN}, {0}, {0}},
    Params{{sNaN, sNaN}, {0}, {0}},
    Params{{sNaN, 5}, {0}, {0}},
    Params{{5, sNaN}, {0}, {0}},
    Params{{0}, {sNaN, sNaN}, {0}},
    Params{{0}, {5, sNaN}, {0}},
    Params{{0}, {sNaN, 5}, {0}},
    Params{{sNaN, sNaN}, {sNaN, sNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(signalingNan, UndefMul, testing::Values(
    Params{{sNaN}, {0}, {0}},
    Params{{sNaN, sNaN}, {0}, {0}},
    Params{{sNaN, 5}, {0}, {0}},
    Params{{5, sNaN}, {0}, {0}},
    Params{{0}, {sNaN, sNaN}, {0}},
    Params{{0}, {5, sNaN}, {0}},
    Params{{0}, {sNaN, 5}, {0}},
    Params{{sNaN, sNaN}, {sNaN, sNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(signalingNan, UndefExp, testing::Values(
    Params{{sNaN}, {0}, {0}},
    Params{{sNaN, sNaN}, {0}, {0}},
    Params{{sNaN, 5}, {0}, {0}},
    Params{{5, sNaN}, {0}, {0}},
    Params{{0}, {sNaN, sNaN}, {0}},
    Params{{0}, {5, sNaN}, {0}},
    Params{{0}, {sNaN, 5}, {0}},
    Params{{sNaN, sNaN}, {sNaN, sNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(signalingNan, UndefRoot, testing::Values(
    Params{{sNaN}, {0}, {0}},
    Params{{sNaN, sNaN}, {0}, {0}},
    Params{{sNaN, 5}, {0}, {0}},
    Params{{5, sNaN}, {0}, {0}},
    Params{{0}, {sNaN, sNaN}, {0}},
    Params{{0}, {5, sNaN}, {0}},
    Params{{0}, {sNaN, 5}, {0}},
    Params{{sNaN, sNaN}, {sNaN, sNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(signalingNan, UndefMode, testing::Values(
    Params{{sNaN}, {0}, {0}},
    Params{{sNaN, sNaN}, {0}, {0}},
    Params{{sNaN, 5}, {0}, {0}},
    Params{{5, sNaN}, {0}, {0}},
    Params{{0}, {sNaN, sNaN}, {0}},
    Params{{0}, {5, sNaN}, {0}},
    Params{{0}, {sNaN, 5}, {0}},
    Params{{sNaN, sNaN}, {sNaN, sNaN}, {0}}

));

INSTANTIATE_TEST_CASE_P(signalingNan, UndefFactorial, testing::Values(
    UnariParams{{sNaN}, {0}},
    UnariParams{{sNaN, sNaN}, {0}},
    UnariParams{{5, sNaN}, {0}}
));

TEST_P(UndefAdd, oper)
{
    EXPECT_THROW(p.number1 + p.number2, UndefinedException);
}

TEST_P(UndefSub, oper)
{
    EXPECT_THROW(p.number1 - p.number2, UndefinedException);
}

TEST_P(UndefMul, oper)
{
    EXPECT_THROW(p.number1 * p.number2, UndefinedException);
}

TEST_P(UndefDiv, oper)
{
    EXPECT_THROW(p.number1 / p.number2, UndefinedException);
}

TEST_P(UndefExp, oper)
{
    EXPECT_THROW(p.number1 ^p.number2, UndefinedException);
}

TEST_P(UndefMode, oper)
{
    EXPECT_THROW(p.number1 % p.number2, UndefinedException);
}

TEST_P(UndefFactorial, oper)
{
    EXPECT_THROW(!p.number, UndefinedException);
}

TEST_P(UndefAdd, fce)
{
    EXPECT_THROW(p.number1.add(p.number2), UndefinedException);
}

TEST_P(UndefSub, fce)
{
    EXPECT_THROW(p.number1.sub(p.number2), UndefinedException);
}

TEST_P(UndefMul, fce)
{
    EXPECT_THROW(p.number1.mul(p.number2), UndefinedException);
}

TEST_P(UndefDiv, fce)
{
    EXPECT_THROW(p.number1.div(p.number2), UndefinedException);
}

TEST_P(UndefExp, fce)
{
    EXPECT_THROW(p.number1.pow(p.number2), UndefinedException);
}

TEST_P(UndefMode, fce)
{
    EXPECT_THROW(p.number1.mod(p.number2), UndefinedException);
}

TEST_P(UndefRoot, fce)
{
    EXPECT_THROW(p.number1.root(p.number2), UndefinedException);
}

TEST_P(UndefFactorial, fce)
{
    EXPECT_THROW(p.number.fact(), UndefinedException);
}
